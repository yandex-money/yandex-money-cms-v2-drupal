<?php
use YandexCheckout\Client;
use YandexCheckout\Model\Notification\NotificationSucceeded;
use YandexCheckout\Model\Notification\NotificationWaitingForCapture;
use YandexCheckout\Model\NotificationEventType;
use YandexCheckout\Model\PaymentMethodType;
use YandexCheckout\Model\PaymentStatus;
use YandexCheckout\Request\Payments\Payment\CreateCaptureRequest;

$modulePath = drupal_get_path('module', 'yamoney_api');
require_once $modulePath.DIRECTORY_SEPARATOR.'YandexMoneyLogger.php';
require_once $modulePath.DIRECTORY_SEPARATOR.'yandex-checkout-sdk-php'.DIRECTORY_SEPARATOR.'autoload.php';

define('YAMONEY_API_CHECK_RESULT_CODE_SUCCESS', 0);
define('YAMONEY_API_CHECK_RESULT_CODE_ERROR_MD5', 1);
define('YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM', 100);
define('YAMONEY_API_CHECK_RESULT_CODE_ERROR_REQUEST', 200);
define('YAMONEY_API_DEFAULT_TAX_RATE_ID', 1);
define('YAMONEY_MODULE_VERSION', '1.0.21');
define('YAMONEY_API_DEFAULT_PAYMENT_METHOD', \YandexCheckout\Model\PaymentMethodType::BANK_CARD);
define('QUICK_API_PAY_VERSION', 2);
define('INSTALLMENTS_MIN_AMOUNT', 3000);

define('YAMONEY_API_ORDER_STATUS_PENDING', 'pending');
define('YAMONEY_API_ORDER_STATUS_PROCESSING', 'processing');
define('YAMONEY_API_ORDER_STATUS_CANCELED', 'canceled');
define('YAMONEY_API_ORDER_STATUS_COMPLETED', 'completed');

/**
 * Implements hook_init().
 */
function yamoney_api_init()
{
    module_load_include('inc', 'yamoney_api', 'transactions');
}

/**
 * Implements hook_permission().
 */
function yamoney_api_permission()
{
    return array(
        'access yamoney_api_ money transaction'     => array(
            'title'       => t('Access YaMoney transaction'),
            'description' => t('Display the yandex money transaction.'),
        ),
        'access own yamoney_api_ money transaction' => array(
            'title'       => t('Access own YaMoney transaction'),
            'description' => t('Display the yandex money transaction by own user.'),
        ),
        'access yamoney_api settings'               => array(
            'title'       => t('Access YaMoney API'),
            'description' => t('Access to Yandex Money API variables.'),
        ),
    );
}

/**
 * Implements hook_menu().
 */
function yamoney_api_menu()
{
    $items = array();

    // Secret transaction status url
    $items['yamoney_api/check_wallet'] = array(
        'page callback'   => 'yamoney_api_check_wallet',
        'access callback' => 'yamoney_api_check_server_ip',
        'type'            => MENU_CALLBACK,
    );
    // Config page
    $items['admin/config/system/yamoney_api'] = array(
        'title'            => t('Yandex.Money Core 2.0'),
        'description'      => t('Yandex.Money base settings page.'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('yamoney_api_admin_settings'),
        'access arguments' => array('access yamoney_api settings'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'yamoney_api.admin.inc',
    );

    // Transactions page menu
    $items['admin/reports/yamoney_api_transactions'] = array(
        'title'            => t('Yandex.Money 2.0 transactions '),
        'description'      => t('Yandex.Money 2.0 all transactions page.'),
        'page callback'    => 'yamoney_api_transactions_page',
        'access arguments' => array('access yamoney_api_ money transaction'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'transactions.inc',
    );

    // Yamoney_api actions
    $items['admin/yamoney_api/actions'] = array(
        'page callback'    => 'yamoney_api_actions',
        'access arguments' => array('access yamoney_api_ money transaction'),
        'type'             => MENU_CALLBACK,
    );

    // Account transaction table
    $items['user/%user/yamoney_api_payments'] = array(
        'title'            => t('My transactions'),
        'description'      => t('Yandex money user transactions page.'),
        'page callback'    => 'yamoney_api_transactions_user_page',
        'page arguments'   => array(1),
        'access arguments' => array('access own yamoney_api_ money transaction'),
        'type'             => MENU_LOCAL_TASK,
        'file'             => 'transactions.inc',
    );

    // Payment callbacks
    $items['yamoney_api/commerce/return'] = array(
        'page callback'   => 'yamoney_api_commerce_return_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    // Payment callbacks
    $items['yamoney_api/ubercart/return'] = array(
        'page callback'   => 'yamoney_api_ubercart_return_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    $items['yamoney_api/ubercart/notify'] = array(
        'page callback'   => 'yamoney_api_ubercart_notify',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    $items['yamoney_api/commerce/notify'] = array(
        'page callback'   => 'yamoney_api_commerce_notify',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    $items['yamoney_api/success'] = array(
        'page callback'   => 'yamoney_api_complete_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    $items['yamoney_api/fail']    = array(
        'page callback'   => 'yamoney_api_fail_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    $items['yamoney_api/temp']    = array(
        'page callback'   => 'yamoney_api_temp_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    return $items;
}

/**
 * @return Client
 */
function yamoney_api__common__get_api_client()
{
    $shopId       = variable_get('yamoney_api_shop_id');
    $shopPassword = variable_get('yamoney_api_secret');
    $apiClient    = new Client();
    $apiClient->setAuth($shopId, $shopPassword);
    $apiClient->setLogger(new YandexMoneyLogger());

    return $apiClient;
}

function yamoney_api_ubercart_return_page()
{
    YandexMoneyLogger::info('Return url init ubercart');
    $failUrl    = 'yamoney_api/fail';
    $successUrl = 'yamoney_api/success';

    $params = drupal_get_query_parameters();
    if (!isset($params['orderId'])) {
        YandexMoneyLogger::info('Payment failed. Empty params orderId');
        drupal_goto($failUrl);
    }

    $order = uc_order_load($params['orderId']);
    if (!$order) {
        YandexMoneyLogger::info('Payment failed. Can not load oder id #'.$params['orderId']);
        drupal_goto($failUrl);
    }
    YandexMoneyLogger::info('Order: '.json_encode($order));

    $transaction = yamoney_api_transaction_load_by_order($order->order_id);
    if (!$transaction) {
        YandexMoneyLogger::info('Payment failed. Transaction not found for order id #'.$params['orderId']);
        drupal_goto($failUrl);
    }
    YandexMoneyLogger::info('Transaction: '.json_encode($transaction));

    $apiClient = yamoney_api__common__get_api_client();

    $paymentId = $transaction->payment_id;

    try {
        $payment = $apiClient->getPaymentInfo($paymentId);
        if (!$payment) {
            YandexMoneyLogger::info('Payment failed. Empty payment info. PaymentId #'.$paymentId);
            drupal_goto($failUrl);
        }
        $url = $payment->getPaid() ? $successUrl : $failUrl;
        drupal_goto($url);
    } catch (Exception $e) {
        YandexMoneyLogger::info('Payment failed. Redirect: '.url($failUrl, array('absolute' => true)));
        YandexMoneyLogger::error('Error: '.$e->getMessage());
        drupal_goto($failUrl);
    }
}

function yamoney_api_commerce_return_page()
{
    YandexMoneyLogger::info('Return url init');
    $failUrl    = 'yamoney_api/fail';
    $successUrl = 'yamoney_api/success';

    $params = drupal_get_query_parameters();
    if (!isset($params['orderId'])) {
        YandexMoneyLogger::info('Payment failed. Empty params orderId');
        drupal_goto($failUrl);
    }
    $order = commerce_order_load($params['orderId']);
    if (!$order) {
        YandexMoneyLogger::info('Payment failed. Can not load oder id #'.$params['orderId']);
        drupal_goto($failUrl);
    }
    $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
    $transaction  = !empty($transactions) ? array_shift($transactions) : null;

    if (!$transaction) {
        YandexMoneyLogger::info('Payment failed. Transaction not found for order id #'.$params['orderId']);
        drupal_goto($failUrl);
    }
    $apiClient = yamoney_api__common__get_api_client();

    $paymentId = $transaction->remote_id;

    try {
        $payment = $apiClient->getPaymentInfo($paymentId);
        if (!$payment) {
            YandexMoneyLogger::info('Payment failed. Empty payment info. PaymentId #'.$paymentId);
            drupal_goto($failUrl);
        }

        $url = $payment->getPaid() ? $successUrl : $failUrl;
        drupal_goto($url);
    } catch (Exception $e) {
        YandexMoneyLogger::info('Payment failed. Redirect: '.url($failUrl, array('absolute' => true)));
        YandexMoneyLogger::error('Api error: '.$e->getMessage());
        drupal_goto($failUrl);
    }
}

function yamoney_api_ubercart_notify()
{
    YandexMoneyLogger::info('Return notification init ubercart');
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        exit();
    }
    $notification = yamoney_api_common_get_payment_info_from_input();
    $paymentId    = $notification->getObject()->getId();

    $apiClient = yamoney_api__common__get_api_client();

    $transaction = yamoney_api_transaction_load_by_payment($paymentId);
    yamoney_api_common_check_value_is_not_empty($transaction, '404 Not Found', 'Transaction not found');
    $orderResult = uc_order_load($transaction->order_id);
    if ($orderResult && is_array($orderResult)) {
        $order = $orderResult[0];
    } else {
        $order = $orderResult;
    }
    yamoney_api_common_check_value_is_not_empty($order, '404 Not Found', 'Order not found');
    if ($order->order_status === YAMONEY_API_ORDER_STATUS_COMPLETED) {
        yamoney_api_common_exit_200();
    }

    $payment = $apiClient->getPaymentInfo($paymentId);
    yamoney_api_common_check_value_is_not_empty($payment, '400 Bad Request', 'Empty payment info');

    if ($notification->getEvent() === NotificationEventType::PAYMENT_WAITING_FOR_CAPTURE
        && $payment->getStatus() === PaymentStatus::WAITING_FOR_CAPTURE
    ) {
        if (yamoney_api__common__is_enable_hold_mode()
            && $payment->getPaymentMethod()->getType() === PaymentMethodType::BANK_CARD
        ) {
            YandexMoneyLogger::info('Hold payment for order: '.$order->order_id);
            uc_order_update_status($order->order_id, YAMONEY_API_ORDER_STATUS_PROCESSING);
            uc_order_comment_save($order->order_id, 0,
                sprintf(t('Поступил новый платёж. Он ожидает подтверждения до %1$s, после чего автоматически отменится'),
                    $payment->getExpiresAt()->format('d.m.Y H:i')));
        } else {
            $captureRequest = CreateCaptureRequest::builder()->setAmount($payment->getAmount())->build();
            $payment        = $apiClient->capturePayment($captureRequest, $payment->getId());
            yamoney_api_common_check_value_is_not_empty($payment, '400 Bad Request', 'Empty payment info');
        }
        yamoney_api_update_transaction_status($paymentId, $payment->getStatus());
        yamoney_api_common_exit_200();
    }

    if ($notification->getEvent() === NotificationEventType::PAYMENT_SUCCEEDED
        && $payment->getStatus() === PaymentStatus::SUCCEEDED
    ) {
        YandexMoneyLogger::info('Order status completed');
        uc_order_update_status($order->order_id, YAMONEY_API_ORDER_STATUS_COMPLETED);
        yamoney_api_update_transaction_status($paymentId, $payment->getStatus());
        yamoney_api_update_transaction_amount($paymentId, $payment->getAmount()->getValue());
        yamoney_api_common_exit_200();
    }
    YandexMoneyLogger::error('Wrong payment status: '.$payment->getStatus());
    yamoney_api_common_exit_400();
}

function yamoney_api_commerce_notify()
{
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        exit();
    }

    $notification = yamoney_api_common_get_payment_info_from_input();
    $paymentId    = $notification->getObject()->getId();
    $transaction  = yaCommerceApiPaymentTransactioLoad($paymentId);
    $order        = commerce_order_load($transaction->order_id);
    yamoney_api_common_check_value_is_not_empty($order, '404 Not Found', 'Order not found');

    $apiClient = yamoney_api__common__get_api_client();

    if ($order->status === YAMONEY_API_ORDER_STATUS_COMPLETED) {
        yamoney_api_common_exit_200();
    }
    $payment = $apiClient->getPaymentInfo($paymentId);
    yamoney_api_common_check_value_is_not_empty($payment, '400 Bad Request', 'Empty payment info');

    if ($notification->getEvent() === NotificationEventType::PAYMENT_WAITING_FOR_CAPTURE
        && $payment->getStatus() === PaymentStatus::WAITING_FOR_CAPTURE
    ) {
        if (yamoney_api__common__is_enable_hold_mode()
            && $payment->getPaymentMethod()->getType() === PaymentMethodType::BANK_CARD
        ) {
            YandexMoneyLogger::info('Hold payment for order: '.$order->order_number);
            commerce_order_status_update($order, YAMONEY_API_ORDER_STATUS_PROCESSING);
            $transaction->remote_status = $payment->getStatus();
            $transaction->message       = sprintf(t('Поступил новый платёж. Он ожидает подтверждения до %1$s, после чего автоматически отменится'),
                $payment->getExpiresAt()->format('d.m.Y H:i'));
            commerce_payment_transaction_save($transaction);
        } else {
            $captureRequest = CreateCaptureRequest::builder()->setAmount($payment->getAmount())->build();
            $payment        = $apiClient->capturePayment($captureRequest, $payment->getId());
            yamoney_api_common_check_value_is_not_empty($payment, '400 Bad Request', 'Empty payment info');
        }
        yamoney_api_update_transaction_status($paymentId, $payment->getStatus());
        yamoney_api_common_exit_200();
    }

    if ($notification->getEvent() === NotificationEventType::PAYMENT_SUCCEEDED
        && $payment->getStatus() === PaymentStatus::SUCCEEDED
    ) {
        YandexMoneyLogger::info('Order status completed');
        commerce_order_status_update($order, YAMONEY_API_ORDER_STATUS_COMPLETED);
        $transaction->status        = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->remote_status = $payment->getStatus();
        commerce_payment_transaction_save($transaction);
        yamoney_api_update_transaction_status($paymentId, $payment->getStatus());
        yamoney_api_update_transaction_amount($paymentId, $payment->getAmount()->getValue());
        yamoney_api_common_exit_200();
    }

    YandexMoneyLogger::error('Wrong payment status: '.$payment->getStatus());
    yamoney_api_common_exit_400();
}

/**
 * @return NotificationWaitingForCapture|NotificationSucceeded
 */
function yamoney_api_common_get_payment_info_from_input()
{
    $body = @file_get_contents('php://input');
    YandexMoneyLogger::info('Notification: '.$body);
    $callbackParams = json_decode($body, true);
    yamoney_api_common_check_json_last_error();

    try {
        $notification = ($callbackParams['event'] === NotificationEventType::PAYMENT_SUCCEEDED)
            ? new NotificationSucceeded($callbackParams)
            : new NotificationWaitingForCapture($callbackParams);
    } catch (\Exception $e) {
        YandexMoneyLogger::error('Invalid notification object - '.$e->getMessage());
        header('HTTP/1.1 400 Invalid object in body');
        exit();
    }

    $payment = $notification->getObject();
    yamoney_api_common_check_value_is_not_empty($payment->id, '400 Bad Request', 'Empty payment response id');

    return $notification;
}

function yamoney_api_actions()
{
    $action    = filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING);
    $paymentId = filter_input(INPUT_POST, 'paymentId', FILTER_SANITIZE_STRING);
    $module    = filter_input(INPUT_POST, 'module', FILTER_SANITIZE_STRING);

    $transaction = yamoney_api_transaction_load_by_payment($paymentId);
    yamoney_api_common_check_value_is_not_empty($transaction, '404 Not Found', 'Transaction not found');

    $apiClient = yamoney_api__common__get_api_client();

    $payment = $apiClient->getPaymentInfo($paymentId);
    yamoney_api_common_check_value_is_not_empty($payment, '400 Bad Request', 'Empty payment info');

    $rightStatus = $payment->getStatus() === PaymentStatus::WAITING_FOR_CAPTURE;
    yamoney_api_common_check_value_is_not_empty($rightStatus, '400 Bad Request',
        'Capture payment error: wrong payment status: '.$payment->getStatus());

    if ($module === 'uc_payment') {
        $orderResult = uc_order_load($transaction->order_id);
        if ($orderResult && is_array($orderResult)) {
            $order = $orderResult[0];
        } else {
            $order = $orderResult;
        }
        yamoney_api_common_check_value_is_not_empty($order, '404 Not Found', 'Order not found');
        switch ($action) {
            case 'capturePayment':
                ya_ubercart_api_capture_payment($payment, $order);
                break;
            case 'cancelPayment':
                ya_ubercart_api_cancel_payment($paymentId, $order);
                break;
        }
    } elseif ($module === 'commerce') {
        $order = commerce_order_load($transaction->order_id);
        yamoney_api_common_check_value_is_not_empty($order, '404 Not Found', 'Order not found');
        switch ($action) {
            case 'capturePayment':
                ya_commerce_api_capture_payment($payment, $order);
                break;
            case 'cancelPayment':
                ya_commerce_api_cancel_payment($paymentId, $order);
                break;
        }
    }

    YandexMoneyLogger::error('Capture payment error: module or order not found');
}

function yamoney_api_common_check_json_last_error()
{
    if (json_last_error()) {
        YandexMoneyLogger::info('Parse POST body failed');
        header('HTTP/1.1 400 Bad Request');
        header('Status: 400 Bad Request');
        exit();
    }
}

/**
 * @param mixed $value
 * @param string $status
 * @param string $logMessage
 */
function yamoney_api_common_check_value_is_not_empty($value, $status, $logMessage)
{
    if (!$value) {
        YandexMoneyLogger::error($logMessage);
        header('HTTP/1.1 '.$status);
        header('Status: '.$status);
        exit();
    }
}

function yamoney_api_common_exit_200()
{
    header('HTTP/1.1 200 OK');
    header('Status: 200 OK');
    exit();
}

function yamoney_api_common_exit_400()
{
    header('HTTP/1.1 400 Bad Request');
    header('Status: 400 Bad Request');
    exit();
}

/**
 * Returns text message for success transaction
 * @return mixed
 */
function yamoney_api_complete_page()
{
    drupal_set_title(t('Congratulations!'));
    module_invoke_all('yamoney_api_complete');
    $success = variable_get('yamoney_api_success_text', array('value' => ''));
    $page    = array(
        '#markup' => $success['value'],
    );
    drupal_alter('yamoney_api_complete_page', $page);

    return $page;
}

/**
 * Returns text message for failed transaction.
 * @return mixed
 */
function yamoney_api_fail_page()
{
    drupal_set_title(t('Sorry!'));
    module_invoke_all('yamoney_api_fail');
    $fail = variable_get('yamoney_api_fail_text', array('value' => ''));
    $page = array(
        '#markup' => $fail['value'],
    );
    drupal_alter('yamoney_api_fail_page', $page);

    return $page;
}

/**
 * One callback to handle both Success and Fail pages.
 */
function yamoney_api_temp_page()
{
    if (isset($_GET['action']) && $_GET['action'] === 'PaymentSuccess') {
        drupal_goto('yamoney_api/complete', array('query' => $_GET));
    } else {
        drupal_goto('yamoney_api/fail', array('query' => $_GET));
    }
}

/**
 * Check Yandex.Money IP
 * @return bool
 */
function yamoney_api_check_server_ip()
{
    $ip          = ip_address();
    $allowed_ips = variable_get('yamoney_api_ip', '0.0.0.0');
    $allowed_ips = explode("\n", $allowed_ips);
    foreach ($allowed_ips as $allowed_ip) {
        $allowed_ip = trim($allowed_ip);
        if (empty($allowed_ip)) {
            continue;
        }
        if ($allowed_ip === '0.0.0.0' || $ip === $allowed_ip) {
            return true;
        }
    }

    return false;
}

/**
 * @param array $params
 *
 * @return string
 */
function yamoney_api_create_md5($params = array())
{
    if (!empty($params)) {
        $output = '';
        $output .= $params['action'];
        $output .= ';'.$params['orderSumAmount'];
        $output .= ';'.$params['orderSumCurrencyPaycash'];
        $output .= ';'.$params['orderSumBankPaycash'];
        $output .= ';'.$params['shopId'];
        $output .= ';'.$params['invoiceId'];
        $output .= ';'.$params['customerNumber'];
        $md5    = md5($output.';'.variable_get('yamoney_api_secret', ''));

        return drupal_strtoupper($md5);
    } else {
        return '';
    }
}

/**
 * Handle "check payment" requests from Yandex.Money
 */
function yamoney_api_check_wallet()
{

    if (!isset($_POST['label'])) {
        http_response_code(404);

        return;
    }

    $secretWord = variable_get('yamoney_secret', '');

    $string =       $_POST['notification_type']
        . '&' . $_POST['operation_id']
        . '&' . $_POST['amount']
        . '&' . $_POST['currency']
        . '&' . $_POST['datetime']
        . '&' . $_POST['sender']
        . '&' . $_POST['codepro']
        . '&' . $secretWord
        . '&' . $_POST['label'];

    if(sha1($string) !== $_POST['sha1_hash']){
        http_response_code (401);
        return;
    }

    $transaction = yamoney_api_transaction_load($_POST['label']);

    if (!$transaction) {
        http_response_code(404);

        return;
    }

    if (floatval($_POST['withdraw_amount']) < floatval($transaction->amount)) {
        http_response_code(403);

        return;
    }

    if ($transaction->status !== YAMoneyApiTransaction::STATUS_PROCESSED
        && $transaction->status !== YAMoneyApiTransaction::STATUS_PAYED
        && $transaction->status !== YAMoneyApiTransaction::STATUS_IN_PROCESS) {
        http_response_code(401);

        return;
    }

    $payment = array(
        'success'     => true,
        'transaction' => $transaction,
        'request'     => $_POST,
    );

    drupal_alter('yamoney_api_process_payment', $payment);
}

/**
 * @param string $type
 * @param int $code
 * @param string $message
 */
function yamoney_api_check_send_result($type, $code = 0, $message = '')
{
    if (count($_POST) == 0) {
        return;
    }
    $attributes = array(
        'performedDatetime' => $_POST['requestDatetime'],
        'code'              => $code,
        'invoiceId'         => $_POST['invoiceId'],
        'shopId'            => $_POST['shopId'],
    );

    if ($message) {
        $attributes['message'] = $message;
    }

    header('Content-Type: application/xml');
    echo '<?xml version="1.0" encoding="UTF-8"?>';
    echo '<'.$type.' '.drupal_attributes($attributes).' />';

    drupal_exit();
}

/**
 * @return array
 */
function yamoney_api_get_payment_methods()
{
    return array(
        \YandexCheckout\Model\PaymentMethodType::YANDEX_MONEY => t('Payment from a Yandex.Money e-wallet'),
        \YandexCheckout\Model\PaymentMethodType::BANK_CARD    => t('Payment by any bank card'),
        \YandexCheckout\Model\PaymentMethodType::CASH         => t('Payment in cash via retailers and payment kiosks'),
        \YandexCheckout\Model\PaymentMethodType::WEBMONEY     => t('Payment from a WebMoney e-wallet'),
        \YandexCheckout\Model\PaymentMethodType::ALFABANK     => t('Payment via Alfa-Click'),
        \YandexCheckout\Model\PaymentMethodType::SBERBANK     => t(
            'Payment via Sberbank: payment by text messages or Sberbank Online'
        ),
        \YandexCheckout\Model\PaymentMethodType::QIWI         => t('Payment via QIWI Wallet'),
        \YandexCheckout\Model\PaymentMethodType::TINKOFF_BANK => t('Tinkoff online banking'),
        \YandexCheckout\Model\PaymentMethodType::INSTALLMENTS => t('Installments'),
    );
}

/**
 * @return array
 */
function yamoney_api_get_enabled_payment_methods()
{
    $payments = array();

    if (variable_get('yamoney_api_shop', 0)) {
        $all_payments     = yamoney_api_get_payment_methods();
        $enabled_payments = variable_get('yamoney_api_payment_method', array_keys($all_payments));
        foreach ($all_payments as $key => $label) {
            if (isset($enabled_payments[$key]) && $enabled_payments[$key] === $key) {
                $payments[$key] = $label;
            }
        }

    } else if (variable_get('yamoney_api_p2p', 0)) {
        $payments = array(
            'AC' => 'Банковские карты — Visa, Mastercard и Maestro, «Мир»',
            'PC' => 'Яндекс.Деньги',
        );
    }

    return $payments;
}

/**
 * @param YAMoneyApiTransaction $transaction
 *
 * @return array
 */
function yamoney_api_get_order_submission_params(YAMoneyApiTransaction $transaction)
{
    if (variable_get('yamoney_api_shop', 0)) {
        $params = yamoney_api_get_shop_params($transaction);
    } else if (variable_get('yamoney_api_p2p', 0)) {
        $params = yamoney_api_get_quick_params($transaction);
    } else if (variable_get('yamoney_api_billing_enable', 0)) {
        $params = yamoney_api_get_fastPay_params($transaction);
    }


    drupal_alter('yamoney_api_order_submission_params', $params);

    return $params;
}

/**
 * @param YAMoneyApiTransaction $transaction
 *
 * @return array
 */
function yamoney_api_get_shop_params(YAMoneyApiTransaction $transaction)
{
    $params = array();

    // Идентификатор Контрагента
    $params['shopId'] = variable_get('yamoney_api_shop_id', '');

    // Идентификатор товара
    //$params['shopArticleId'] = '';

    // Сумма заказа
    $params['sum'] = $transaction->amount;

    // Идентификатор плательщика. Номер оплачиваемого мобильного телефона, договора и т. п., специфично для Контрагента.
    $params['customerNumber'] = $transaction->uid;

    // Уникальный для данного shopId номер заказа в ИС Контрагента.
    $params['orderNumber'] = $transaction->order_id;

    // URL, на который должен быть осуществлен редирект в случае успеха перевода (urlencoded значение).
    $params['shopSuccessURL'] = url('yamoney_api/complete', array('absolute' => true));

    // URL, на который должен быть осуществлен редирект в случае ошибки (urlencoded значение).
    $params['shopFailURL'] = url('yamoney_api/fail', array('absolute' => true));

    // Детали способа совершения платежа.
    $params['paymentType'] = (variable_get('yamoney_api_paymode') == 'shop') ? variable_get(
        'yamoney_api_default_payment_method',
        YAMONEY_API_DEFAULT_PAYMENT_METHOD
    ) : '';

    // Provide CMS name
    $params['cms_name'] = 'drupal';

    // Internally used field
    $params['order_id'] = $transaction->order_id;

    // Internally used field
    $params['transaction_id'] = $transaction->ymid;

    drupal_alter('yamoney_api_shop_params', $params);

    return $params;
}

/**
 * @param YAMoneyApiTransaction $transaction
 *
 * @return array
 */
function yamoney_api_get_quick_params(YAMoneyApiTransaction $transaction)
{
    $params = array();

    $params['receiver']         = variable_get('yamoney_api_receiver', '');
    $params['formcomment']      = variable_get('yamoney_api_formcomment', '');
    $params['short-dest']       = t('Payments for order No').$transaction->order_id;
    $params['writable-targets'] = false;
    $params['comment-needed']   = false;
    $params['label']            = $transaction->ymid;
    $params['order_id']         = (int)$transaction->order_id;
    $params['successUrl']       = url('yamoney_api/complete', array('absolute' => true));
    $params['targets']          = t('Payments for order No').$transaction->order_id;
    $params['sum']              = $transaction->amount;
    $params['quickpay-form']    = 'shop';
    $params['paymentType']      = variable_get(
        'yamoney_api_default_payment_method',
        YAMONEY_API_DEFAULT_PAYMENT_METHOD
    );
    $params['cms_name']         = 'drupal';

    drupal_alter('yamoney_api_quick_params', $params);

    return $params;
}

function yamoney_api_get_fastPay_params(YAMoneyApiTransaction $transaction)
{
    $params = array();

    $params['formId']          = variable_get('yamoney_billing_id');
    $params['sum']             = $transaction->amount;
    $params['narrative']       = str_replace(
        '%order_id%',
        $transaction->order_id,
        variable_get('yamoney_billing_narrative')
    );
    $params['quickPayVersion'] = QUICK_API_PAY_VERSION;
    $params['fio']             = '';

    drupal_alter('yamoney_fastPay_params', $params);

    return $params;
}

/**
 * @return string
 */
function yamoney_api_get_order_submission_url()
{
    if (variable_get('yamoney_api_shop')) {
        return '/';
    } else if (variable_get('yamoney_api_p2p')) {
        return 'https://money.yandex.ru/quickpay/confirm.xml';
    } else if (variable_get('yamoney_api_billing_enable')) {
        return 'https://money.yandex.ru/fastpay/confirm';
    }
}


/**
 * @return bool
 */
function yamoney_api__common__is_enable_hold_mode()
{
    return (bool)variable_get('yamoney_api_enable_hold_mode', 0);
}

/**
 * @param string $paymentMethod
 *
 * @return bool
 */
function yamoney_api__common__get_capture_value($paymentMethod)
{
    if (!yamoney_api__common__is_enable_hold_mode()) {
        return true;
    }

    return !in_array($paymentMethod, array('', PaymentMethodType::BANK_CARD));
}