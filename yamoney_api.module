<?php
use YaMoney\Client\YandexMoneyApi;
use YaMoney\Common\Exceptions\ApiException;
use YaMoney\Common\Exceptions\NotFoundException;
use YaMoney\Model\Notification\NotificationWaitingForCapture;
use YaMoney\Model\PaymentStatus;
use YaMoney\Request\Payments\Payment\CreateCaptureRequest;

$modulePath = drupal_get_path('module', 'yamoney_api');
require_once $modulePath.'/YandexMoneyLogger.php';
require_once $modulePath.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';

define('YAMONEY_API_CHECK_RESULT_CODE_SUCCESS', 0);
define('YAMONEY_API_CHECK_RESULT_CODE_ERROR_MD5', 1);
define('YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM', 100);
define('YAMONEY_API_CHECK_RESULT_CODE_ERROR_REQUEST', 200);
define('YAMONEY_API_DEFAULT_TAX_RATE_ID', 1);
define('YAMONEY_MODULE_VERSION', '1.0.2');
define('YAMONEY_API_DEFAULT_PAYMENT_METHOD', \YaMoney\Model\PaymentMethodType::BANK_CARD);
define('QUICK_API_PAY_VERSION', 2);

/**
 * Implements hook_init().
 */
function yamoney_api_init()
{
    module_load_include('inc', 'yamoney_api', 'transactions');
}

/**
 * Implements hook_permission().
 */
function yamoney_api_permission()
{
    return array(
        'access yamoney_api_ money transaction'     => array(
            'title'       => t('Access YaMoney transaction'),
            'description' => t('Display the yandex money transaction.'),
        ),
        'access own yamoney_api_ money transaction' => array(
            'title'       => t('Access own YaMoney transaction'),
            'description' => t('Display the yandex money transaction by own user.'),
        ),
        'access yamoney_api settings'               => array(
            'title'       => t('Access YaMoney API'),
            'description' => t('Access to Yandex Money API variables.'),
        ),
    );
}

/**
 * Implements hook_menu().
 */
function yamoney_api_menu()
{
    $items = array();

    // Secret transaction status url
    $items['yamoney_api/check_order']   = array(
        'page callback'   => 'yamoney_api_check_order',
        'access callback' => 'yamoney_api_check_server_ip',
        'type'            => MENU_CALLBACK,
    );
    $items['yamoney_api/check_payment'] = array(
        'page callback'   => 'yamoney_api_check_payment',
        'access callback' => 'yamoney_api_check_server_ip',
        'type'            => MENU_CALLBACK,
    );
    $items['yamoney_api/check_wallet']  = array(
        'page callback'   => 'yamoney_check_wallet',
        'access callback' => 'yamoney_check_server_ip',
        'type'            => MENU_CALLBACK,
    );
    // Config page
    $items['admin/config/system/yamoney_api'] = array(
        'title'            => t('Yandex.Money Core 2.0'),
        'description'      => t('Yandex.Money base settings page.'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('yamoney_api_admin_settings'),
        'access arguments' => array('access yamoney_api settings'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'yamoney_api.admin.inc',
    );

    // Transactions page menu
    $items['admin/reports/yamoney_api_transactions'] = array(
        'title'            => t('Yandex.Money 2.0 transactions '),
        'description'      => t('Yandex.Money 2.0 all transactions page.'),
        'page callback'    => 'yamoney_api_transactions_page',
        'access arguments' => array('access yamoney_api_ money transaction'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'transactions.inc',
    );

    // Account transaction table
    $items['user/%user/yamoney_api_payments'] = array(
        'title'            => t('My transactions'),
        'description'      => t('Yandex money user transactions page.'),
        'page callback'    => 'yamoney_api_transactions_user_page',
        'page arguments'   => array(1),
        'access arguments' => array('access own yamoney_api_ money transaction'),
        'type'             => MENU_LOCAL_TASK,
        'file'             => 'transactions.inc',
    );

    // Payment callbacks
    $items['yamoney_api/commerce/return'] = array(
        'page callback'   => 'yamoney_api_commerce_return_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    // Payment callbacks
    $items['yamoney_api/ubercart/return'] = array(
        'page callback'   => 'yamoney_api_ubercart_return_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    $items['yamoney_api/ubercart/notify'] = array(
        'page callback'   => 'yamoney_api_ubercart_notify',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    $items['yamoney_api/commerce/notify'] = array(
        'page callback'   => 'yamoney_api_commerce_notify',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    $items['yamoney_api/success'] = array(
        'page callback'   => 'yamoney_api_complete_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    $items['yamoney_api/fail']    = array(
        'page callback'   => 'yamoney_api_fail_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    $items['yamoney_api/temp']    = array(
        'page callback'   => 'yamoney_api_temp_page',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );

    return $items;
}

function yamoney_api_ubercart_return_page()
{
    YandexMoneyLogger::info('Return url init');
    $params = drupal_get_query_parameters();
    if (isset($params['orderId'])) {
        $order       = uc_order_load($params['orderId']);
        $transaction = yamoney_api_transaction_load_by_order($order->order_id);

        if ($transaction) {
            $shopId       = variable_get('yamoney_api_shop_id');
            $shopPassword = variable_get('yamoney_api_secret');
            $apiClient    = new YandexMoneyApi();
            $apiClient->setAuth($shopId, $shopPassword);
            $apiClient->setLogger(new YandexMoneyLogger());

            $paymentId = $transaction->payment_id;

            try {
                $result                     = $apiClient->getPaymentInfo($paymentId);
                $transaction->remote_status = $result->status;

                if ($result->status == PaymentStatus::SUCCEEDED) {
                    uc_order_update_status($order->order_id, 'completed');
                    uc_cart_complete_sale($order);
                    uc_cart_empty($order->uid);
                } elseif ($result->status == PaymentStatus::PENDING) {
                    uc_order_update_status($order->order_id, 'pending');
                    drupal_goto('yamoney_api/fail');
                } elseif ($result->status == PaymentStatus::WAITING_FOR_CAPTURE) {
                    uc_order_update_status($order->order_id, 'processing');
                    $tries = 0;

                    $captureRequest = CreateCaptureRequest::builder()->setAmount($result->getAmount())->build();
                    do {
                        $result = $apiClient->capturePayment(
                            $captureRequest,
                            $paymentId,
                            $order->order_id."_".microtime()
                        );
                        if ($result === null) {
                            $tries++;
                            if ($tries > 3) {
                                break;
                            }
                            sleep(2);
                        } else {

                        }
                    } while ($result === null);
                    if ($result->status == PaymentStatus::SUCCEEDED) {
                        uc_order_update_status($order->order_id, 'completed');
                        uc_cart_complete_sale($order);
                        uc_cart_empty($order->uid);
                        drupal_goto('yamoney_api/success');
                    } else {
                        drupal_goto('yamoney_api/fail');
                    }
                } elseif ($result->status == PaymentStatus::CANCELED) {
                    uc_order_update_status($order->order_id, 'canceled');
                    drupal_goto('yamoney_api/fail');
                }

            } catch (ApiException $e) {
                throw $e;
            }
        }
    }
}

function yamoney_api_commerce_return_page()
{
    YandexMoneyLogger::info('Return url init');
    $params = drupal_get_query_parameters();
    if (isset($params['orderId'])) {
        $order = commerce_order_load($params['orderId']);
        if ($order) {
            $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
            $transaction  = !empty($transactions) ? array_shift($transactions) : null;

            if ($transaction) {
                $shopId       = variable_get('yamoney_api_shop_id');
                $shopPassword = variable_get('yamoney_api_secret');
                $apiClient    = new YandexMoneyApi();
                $apiClient->setLogger(new YandexMoneyLogger());
                $apiClient->setAuth($shopId, $shopPassword);

                $paymentId = $transaction->remote_id;

                try {
                    $tries = 0;
                    do {
                        $paymentResult = $apiClient->getPaymentInfo($paymentId);
                        if ($paymentResult === null) {
                            $tries++;
                            if ($tries > 3) {
                                break;
                            }
                            sleep(2);
                        }
                    } while ($paymentResult === null);
                    if ($paymentResult) {
                        $transaction->remote_status = $paymentResult->status;

                        $url = 'yamoney_api/fail';
                        if ($paymentResult->status == PaymentStatus::SUCCEEDED) {
                            commerce_order_status_update($order, 'completed');
                            YandexMoneyLogger::info(
                                'Payment succeded. Redirect: '.url('yamoney_api/success', array('absolute' => true))
                            );
                            $url = 'yamoney_api/success';
                        } elseif ($paymentResult->status == PaymentStatus::PENDING) {
                            commerce_order_status_update($order, 'pending');
                            YandexMoneyLogger::info(
                                'Payment pending. Redirect: '.url('yamoney_api/fail', array('absolute' => true))
                            );
                            $url = 'yamoney_api/fail';
                        } elseif ($paymentResult->status == PaymentStatus::WAITING_FOR_CAPTURE) {
                            commerce_order_status_update($order, 'processing');
                            $tries = 0;

                            $captureRequest = CreateCaptureRequest::builder()->setAmount(
                                $paymentResult->getAmount()
                            )->build();
                            do {
                                $captureResult = $apiClient->capturePayment(
                                    $captureRequest,
                                    $transaction->remote_id,
                                    $order->order_id."_".$transaction->revision_id
                                );
                                if ($captureResult === null) {
                                    $tries++;
                                    if ($tries > 3) {
                                        break;
                                    }
                                    sleep(2);
                                }
                            } while ($captureResult === null);
                            if ($captureRequest) {
                                $transaction->remote_status = $captureResult->getStatus();
                                if ($captureResult->getStatus() == PaymentStatus::SUCCEEDED) {
                                    commerce_order_status_update($order, 'completed');
                                    YandexMoneyLogger::info(
                                        'Payment succseded. Redirect: '.url(
                                            'yamoney_api/success',
                                            array('absolute' => true)
                                        )
                                    );
                                    $url = 'yamoney_api/success';
                                } else {
                                    YandexMoneyLogger::info(
                                        'Payment canceled. Redirect: '.url(
                                            'yamoney_api/fail',
                                            array('absolute' => true)
                                        )
                                    );
                                    $url = 'yamoney_api/fail';
                                }
                            }
                        } elseif ($paymentResult->status == PaymentStatus::CANCELED) {
                            YandexMoneyLogger::info(
                                'Payment canceled. Redirect: '.url('yamoney_api/fail', array('absolute' => true))
                            );
                            commerce_order_status_update($order, 'checkout_payment');
                            $url = 'yamoney_api/fail';
                        }

                        commerce_payment_transaction_save($transaction);
                        drupal_goto($url);
                    }

                } catch (Exception $e) {
                    YandexMoneyLogger::info(
                        'Payment failed. Redirect: '.url('yamoney_api/fail', array('absolute' => true))
                    );
                    YandexMoneyLogger::error('Api error: '.$e->getMessage());
                    drupal_goto('yamoney_api/fail');
                }
            }
        }
    }
}

function yamoney_api_ubercart_notify()
{
    if ($_SERVER['REQUEST_METHOD'] == "POST") {
        $body           = @file_get_contents('php://input');
        $callbackParams = json_decode($body, true);
        if (!json_last_error()) {
            $notificationModel = new NotificationWaitingForCapture($callbackParams);
            $paymentResponce   = $notificationModel->getObject();
            $paymentId         = $paymentResponce->getId();
            if ($paymentId) {
                $shopId       = variable_get('yamoney_shop_id');
                $shopPassword = variable_get('yamoney_secret');
                $apiClient    = new YandexMoneyApi();
                $apiClient->setAuth($shopId, $shopPassword);
                $apiClient->setLogger(new YandexMoneyLogger());

                $transaction = yamoney_api_transaction_load_by_payment($paymentId);
                if ($transaction) {
                    $orderResult = uc_order_load($transaction->order_id);
                    if ($orderResult && is_array($orderResult)) {
                        $order = $orderResult[0];
                    } else {
                        $order = $orderResult;
                    }
                }

                if (!$transaction || !$order) {
                    header("HTTP/1.1 404 Not Found");
                    header("Status: 404 Not Found");
                    exit();
                }

                if ($transaction
                    && $order
                    && $order->order_status != uc_get_order_status_id('completed')
                ) {
                    $tries = 0;
                    do {
                        $paymentInfoResult = $apiClient->getPaymentInfo($paymentResponce->id);
                        if ($paymentInfoResult === null) {
                            $tries++;
                            if ($tries > 3) {
                                break;
                            }
                            sleep(2);
                        }
                    } while ($paymentInfoResult === null);

                    if ($paymentInfoResult) {
                        switch ($paymentInfoResult->status) {
                            case PaymentStatus::WAITING_FOR_CAPTURE:
                                $captureRequest = CreateCaptureRequest::builder()->setAmount(
                                    $paymentInfoResult->getAmount()
                                )->build();

                                $tries = 0;
                                do {
                                    $capturePaymentResult = $apiClient->capturePayment(
                                        $captureRequest,
                                        $paymentInfoResult->getId(),
                                        $paymentInfoResult->getId()
                                    );
                                    if ($capturePaymentResult === null) {
                                        $tries++;
                                        if ($tries > 3) {
                                            YandexMoneyLogger::info('Maximum  capture tries reached.');
                                            break;
                                        }
                                        sleep(2);
                                    } else {
                                        if ($capturePaymentResult->status == PaymentStatus::SUCCEEDED) {
                                            uc_order_update_status($order->order_id, 'completed');
                                            YandexMoneyLogger::info('Order status completed');
                                        } else {
                                            YandexMoneyLogger::info('Order status canceled');
                                            uc_order_update_status($order->order_id, 'canceled');
                                        }
                                        header("HTTP/1.1 200 OK");
                                        header("Status: 200 OK");
                                    }
                                } while ($capturePaymentResult === null);

                                break;
                            case PaymentStatus::SUCCEEDED:
                                YandexMoneyLogger::info('Order status completed');
                                uc_order_update_status($order->order_id, 'completed');
                                header("HTTP/1.1 200 OK");
                                header("Status: 200 OK");
                                break;
                            case PaymentStatus::CANCELED:
                                YandexMoneyLogger::info('Order status canceled');
                                uc_order_update_status($order->order_id, 'canceled');
                                header("HTTP/1.1 200 OK");
                                header("Status: 200 OK");
                                break;
                            case PaymentStatus::PENDING:
                                header("HTTP/1.1 402 Payment Required");
                                header("Status: 402 Payment Required");
                                break;
                        }
                    }
                } else {
                    header("HTTP/1.1 200 OK");
                    header("Status: 200 OK");
                }
            }
        } else {
            header("HTTP/1.1 400 Bad Request");
            header("Status: 400 Bad Request");
            exit();
        }
    }

    exit();
}

function yamoney_api_commerce_notify()
{
    if ($_SERVER['REQUEST_METHOD'] == "POST") {
        YandexMoneyLogger::info('Notification init');
        $body           = @file_get_contents('php://input');
        $callbackParams = json_decode($body, true);
        if (!json_last_error()) {
            $notificationModel = new NotificationWaitingForCapture($callbackParams);
            $paymentResponce   = $notificationModel->getObject();

            if ($paymentResponce->id) {
                $shopId       = variable_get('yamoney_api_shop_id');
                $shopPassword = variable_get('yamoney_api_secret');
                $transactions = commerce_payment_transaction_load_multiple(
                    array(),
                    array('remote_id' => $paymentResponce->id)
                );
                $transaction  = !empty($transactions) ? array_shift($transactions) : null;
                $order        = commerce_order_load($transaction->order_id);
                if (!$order) {
                    header("HTTP/1.1 404 Not Found");
                    header("Status: 404 Not Found");
                    exit();
                }

                $apiClient = new YandexMoneyApi();
                $apiClient->setAuth($shopId, $shopPassword);
                $apiClient->setLogger(new YandexMoneyLogger());

                if ($order->status !== 'completed') {
                    $tries = 0;
                    do {
                        $paymentInfoResult = $apiClient->getPaymentInfo($paymentResponce->id);
                        if ($paymentInfoResult === null) {
                            $tries++;
                            if ($tries > 3) {
                                YandexMoneyLogger::info('Maximum  capture tries reached.');
                                break;
                            }
                            sleep(2);
                        }
                    } while ($paymentInfoResult === null);

                    if ($paymentInfoResult) {
                        switch ($paymentInfoResult->status) {
                            case PaymentStatus::WAITING_FOR_CAPTURE:
                                $captureRequest = CreateCaptureRequest::builder()->setAmount(
                                    $paymentInfoResult->getAmount()
                                )->build();

                                $tries = 0;
                                do {
                                    $capturePaymentResult = $apiClient->capturePayment(
                                        $captureRequest,
                                        $paymentInfoResult->getId(),
                                        $paymentInfoResult->getId()
                                    );
                                    if ($capturePaymentResult === null) {
                                        $tries++;
                                        if ($tries > 3) {
                                            break;
                                        }
                                        sleep(2);
                                    }
                                } while ($capturePaymentResult === null);
                                if ($capturePaymentResult) {
                                    if ($capturePaymentResult->status == PaymentStatus::SUCCEEDED) {
                                        commerce_order_status_update($order, 'completed');
                                        YandexMoneyLogger::info('Order status completed');
                                    } else {
                                        YandexMoneyLogger::info('Order status canceled');
                                        commerce_order_status_update($order, 'canceled');
                                    }
                                    header("HTTP/1.1 200 OK");
                                    header("Status: 200 OK");
                                }
                                break;
                            case PaymentStatus::SUCCEEDED:
                                YandexMoneyLogger::info('Order status completed');
                                commerce_order_status_update($order, 'completed');
                                header("HTTP/1.1 200 OK");
                                header("Status: 200 OK");
                                break;
                            case PaymentStatus::CANCELED:
                                YandexMoneyLogger::info('Order status canceled');
                                commerce_order_status_update($order, 'canceled');
                                header("HTTP/1.1 200 OK");
                                header("Status: 200 OK");
                                break;
                            case PaymentStatus::PENDING:
                                header("HTTP/1.1 402 Payment Required");
                                header("Status: 402 Payment Required");
                                break;
                        }
                    }
                } else {
                    header("HTTP/1.1 200 OK");
                    header("Status: 200 OK");
                }
            }
        } else {
            YandexMoneyLogger::info('Parse POST body failed');
            header("HTTP/1.1 400 Bad Request");
            header("Status: 400 Bad Request");
            exit();
        }
    }
    exit();
}

/**
 * Returns text message for success transaction
 * @return mixed
 */
function yamoney_api_complete_page()
{
    drupal_set_title(t('Congratulations!'));
    module_invoke_all('yamoney_api_complete');
    $success = variable_get('yamoney_api_success_text', array('value' => ''));
    $page    = array(
        '#markup' => $success['value'],
    );
    drupal_alter('yamoney_api_complete_page', $page);

    return $page;
}

/**
 * Returns text message for failed transaction.
 * @return mixed
 */
function yamoney_api_fail_page()
{
    drupal_set_title(t('Sorry!'));
    module_invoke_all('yamoney_api_fail');
    $fail = variable_get('yamoney_api_fail_text', array('value' => ''));
    $page = array(
        '#markup' => $fail['value'],
    );
    drupal_alter('yamoney_api_fail_page', $page);

    return $page;
}

/**
 * One callback to handle both Success and Fail pages.
 */
function yamoney_api_temp_page()
{
    if (isset($_GET['action']) && $_GET['action'] === 'PaymentSuccess') {
        drupal_goto('yamoney_api/complete', array('query' => $_GET));
    } else {
        drupal_goto('yamoney_api/fail', array('query' => $_GET));
    }
}

/**
 * Check Yandex.Money IP
 * @return bool
 */
function yamoney_api_check_server_ip()
{
    $ip          = ip_address();
    $allowed_ips = variable_get('yamoney_api_ip', '0.0.0.0');
    $allowed_ips = explode("\n", $allowed_ips);
    foreach ($allowed_ips as $allowed_ip) {
        $allowed_ip = trim($allowed_ip);
        if (empty($allowed_ip)) {
            continue;
        }
        if ($allowed_ip === '0.0.0.0' || $ip === $allowed_ip) {
            return true;
        }
    }

    return false;
}

/**
 * @param array $params
 *
 * @return string
 */
function yamoney_api_create_md5($params = array())
{
    if (!empty($params)) {
        $output = '';
        $output .= $params['action'];
        $output .= ';'.$params['orderSumAmount'];
        $output .= ';'.$params['orderSumCurrencyPaycash'];
        $output .= ';'.$params['orderSumBankPaycash'];
        $output .= ';'.$params['shopId'];
        $output .= ';'.$params['invoiceId'];
        $output .= ';'.$params['customerNumber'];
        $md5    = md5($output.';'.variable_get('yamoney_api_secret', ''));

        return drupal_strtoupper($md5);
    } else {
        return '';
    }
}

/**
 * Handle "check order" requests from Yandex.Money
 */
function yamoney_api_check_order()
{
    if (!isset($_POST['action']) || $_POST['action'] !== 'checkOrder') {
        yamoney_api_check_send_result(
            'checkOrderResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_REQUEST,
            'Invalid action. Expected action: checkOrder.'
        );
    }

    if (!isset($_POST['md5']) || $_POST['md5'] !== yamoney_api_create_md5($_POST)) {
        yamoney_api_check_send_result('checkOrderResponse', YAMONEY_API_CHECK_RESULT_CODE_ERROR_MD5);
    }

    if (!isset($_POST['transaction_id'])) {
        yamoney_api_check_send_result(
            'checkOrderResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid transaction_id provided.'
        );
    }

    $transaction = yamoney_api_transaction_load($_POST['transaction_id']);
    if (!$transaction) {
        yamoney_api_check_send_result(
            'checkOrderResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid transaction_id provided.'
        );
    }

    if (floatval($_POST['orderSumAmount']) < floatval($transaction->amount)) {
        yamoney_api_check_send_result(
            'checkOrderResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid amount'
        );
    }

    if ($transaction->status !== YAMoneyApiTransaction::STATUS_IN_PROCESS) {
        yamoney_api_check_send_result(
            'checkOrderResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid transaction state: '.$transaction->status.'. Expected: '.YAMoneyApiTransaction::STATUS_IN_PROCESS.'.'
        );
    }

    $order = array(
        'success'     => true,
        'transaction' => $transaction,
        'request'     => $_POST,
    );
    drupal_alter('yamoney_api_check_order', $order);

    if (!$order['success']) {
        $error = isset($order['error']) ? $order['error'] : 'Can not process transaction.';
        yamoney_api_check_send_result('checkOrderResponse', YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM, $error);
    }

    if (yamoney_api_update_transaction_status($transaction->ymid, YAMoneyApiTransaction::STATUS_PROCESSED)) {
        yamoney_api_check_send_result('checkOrderResponse');
    } else {
        yamoney_api_check_send_result(
            'checkOrderResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Can not save transaction.'
        );
    }
}

/**
 * Handle "check payment" requests from Yandex.Money
 */
function yamoney_api_check_wallet()
{

    if (!isset($_POST['transaction_id'])) {
        http_response_code(404);

        return;
    }

    $string = $_POST['notification_type'].'&'.$_POST['operation_id'].'&'.$_POST['amount'].'&'.$_POST['currency'].
              '&'.$_POST['datetime'].'&'.$_POST['sender'].'&'.$_POST['codepro'].'&'.
              variable_get('yamoney_api_secret', '').'&'.$_POST['label'];
    if (sha1($string) !== $_POST['sha1_hash']) {
        http_response_code(401);

        return;
    }

    $transaction = yamoney_api_transaction_load($_POST['transaction_id']);
    if (!$transaction) {
        http_response_code(404);

        return;
    }

    if (floatval($_POST['withdraw_amount']) < floatval($transaction->amount)) {
        http_response_code(403);

        return;
    }

    if ($transaction->status !== YAMoneyApiTransaction::STATUS_PROCESSED && $transaction->status !== YAMoneyApiTransaction::STATUS_PAYED) {
        http_response_code(401);

        return;
    }

    $payment = array(
        'success'     => true,
        'transaction' => $transaction,
        'request'     => $_POST,
    );
    drupal_alter('yamoney_api_process_payment', $payment);
}

/**
 * Handle "check payment" requests from Yandex.Money
 */
function yamoney_api_check_payment()
{
    if (!isset($_POST['action']) || $_POST['action'] !== 'paymentAviso') {
        yamoney_api_check_send_result(
            'paymentAvisoResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_REQUEST,
            'Invalid action. Expected action: paymentAviso.'
        );
    }

    if (!isset($_POST['md5']) || $_POST['md5'] !== yamoney_create_md5($_POST)) {
        yamoney_api_check_send_result('paymentAvisoResponse', YAMONEY_API_CHECK_RESULT_CODE_ERROR_MD5);
    }

    if (!isset($_POST['transaction_id'])) {
        yamoney_api_check_send_result(
            'paymentAvisoResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid transaction_id provided.'
        );
    }

    $transaction = yamoney_api_transaction_load($_POST['transaction_id']);
    if (!$transaction) {
        yamoney_api_check_send_result(
            'paymentAvisoResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid transaction_id provided.'
        );
    }

    if ($transaction->status !== YAMoneyApiTransaction::STATUS_PROCESSED && $transaction->status !== YAMoneyApiTransaction::STATUS_PAYED) {
        yamoney_api_check_send_result(
            'paymentAvisoResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Invalid transaction state: '.$transaction->status.'. Expected: '.YAMoneyApiTransaction::STATUS_PROCESSED.'.'
        );
    }

    $payment = array(
        'success'     => true,
        'transaction' => $transaction,
        'request'     => $_POST,
    );
    drupal_alter('yamoney_api_process_payment', $payment);

    if (!$payment['success']) {
        $error = isset($payment['error']) ? $payment['error'] : 'Can not process transaction.';
        yamoney_api_check_send_result('paymentAvisoResponse', YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM, $error);
    }

    if ($transaction->status === YAMoneyApiTransaction::STATUS_PAYED || yamoney_api_update_transaction_status(
            $transaction->ymid,
            YAMoneyApiTransaction::STATUS_PAYED
        )
    ) {
        yamoney_api_check_send_result('paymentAvisoResponse');
    } else {
        yamoney_api_check_send_result(
            'paymentAvisoResponse',
            YAMONEY_API_CHECK_RESULT_CODE_ERROR_CUSTOM,
            'Can not save transaction.'
        );
    }
}

/**
 * @param string $type
 * @param int $code
 * @param string $message
 */
function yamoney_api_check_send_result($type, $code = 0, $message = '')
{
    if (count($_POST) == 0) {
        return;
    }
    $attributes = array(
        'performedDatetime' => $_POST['requestDatetime'],
        'code'              => $code,
        'invoiceId'         => $_POST['invoiceId'],
        'shopId'            => $_POST['shopId'],
    );

    if ($message) {
        $attributes['message'] = $message;
    }

    header('Content-Type: application/xml');
    echo '<?xml version="1.0" encoding="UTF-8"?>';
    echo '<'.$type.' '.drupal_attributes($attributes).' />';

    drupal_exit();
}

/**
 * @return array
 */
function yamoney_api_get_payment_methods()
{
    return array(
        \YaMoney\Model\PaymentMethodType::YANDEX_MONEY => t('Payment from a Yandex.Money e-wallet'),
        \YaMoney\Model\PaymentMethodType::BANK_CARD    => t('Payment by any bank card'),
        \YaMoney\Model\PaymentMethodType::CASH         => t('Payment in cash via retailers and payment kiosks'),
        \YaMoney\Model\PaymentMethodType::WEBMONEY     => t('Payment from a WebMoney e-wallet'),
        \YaMoney\Model\PaymentMethodType::ALFABANK     => t('Payment via Alfa-Click'),
        \YaMoney\Model\PaymentMethodType::SBERBANK     => t(
            'Payment via Sberbank: payment by text messages or Sberbank Online'
        ),
        \YaMoney\Model\PaymentMethodType::QIWI         => t('Payment via QIWI Wallet'),
    );
}

/**
 * @return array
 */
function yamoney_api_get_enabled_payment_methods()
{
    $payments         = array();

    if (variable_get('yamoney_api_shop', 0)) {
        $all_payments     = yamoney_api_get_payment_methods();
        $enabled_payments = variable_get('yamoney_api_payment_method', array_keys($all_payments));
        foreach ($all_payments as $key => $label) {
            if (isset($enabled_payments[$key]) && $enabled_payments[$key] === $key) {
                $payments[$key] = $label;
            }
        }

    } else if (variable_get('yamoney_api_p2p', 0)) {
        $payments = array(
            'AC' => 'Банковские карты — Visa, Mastercard и Maestro, «Мир»',
            'PC' => 'Яндекс.Деньги',
        );
    }

    return $payments ;
}

/**
 * @param YAMoneyApiTransaction $transaction
 *
 * @return array
 */
function yamoney_api_get_order_submission_params(YAMoneyApiTransaction $transaction)
{
    if (variable_get('yamoney_api_shop', 0)) {
        $params = yamoney_api_get_shop_params($transaction);
    } else if (variable_get('yamoney_api_p2p', 0)) {
        $params = yamoney_api_get_quick_params($transaction);
    } else if (variable_get('yamoney_api_billing_enable', 0)) {
        $params = yamoney_api_get_fastPay_params($transaction);
    }


    drupal_alter('yamoney_api_order_submission_params', $params);

    return $params;
}

/**
 * @param YAMoneyApiTransaction $transaction
 *
 * @return array
 */
function yamoney_api_get_shop_params(YAMoneyApiTransaction $transaction)
{
    $params = array();

    // Идентификатор Контрагента
    $params['shopId'] = variable_get('yamoney_api_shop_id', '');

    // Идентификатор товара
    //$params['shopArticleId'] = '';

    // Сумма заказа
    $params['sum'] = $transaction->amount;

    // Идентификатор плательщика. Номер оплачиваемого мобильного телефона, договора и т. п., специфично для Контрагента.
    $params['customerNumber'] = $transaction->uid;

    // Уникальный для данного shopId номер заказа в ИС Контрагента.
    $params['orderNumber'] = $transaction->order_id;

    // URL, на который должен быть осуществлен редирект в случае успеха перевода (urlencoded значение).
    $params['shopSuccessURL'] = url('yamoney_api/complete', array('absolute' => true));

    // URL, на который должен быть осуществлен редирект в случае ошибки (urlencoded значение).
    $params['shopFailURL'] = url('yamoney_api/fail', array('absolute' => true));

    // Детали способа совершения платежа.
    $params['paymentType'] = (variable_get('yamoney_api_paymode') == 'shop') ? variable_get(
        'yamoney_api_default_payment_method',
        YAMONEY_API_DEFAULT_PAYMENT_METHOD
    ) : '';

    // Provide CMS name
    $params['cms_name'] = 'drupal';

    // Internally used field
    $params['order_id'] = $transaction->order_id;

    // Internally used field
    $params['transaction_id'] = $transaction->ymid;

    drupal_alter('yamoney_api_shop_params', $params);

    return $params;
}

/**
 * @param YAMoneyApiTransaction $transaction
 *
 * @return array
 */
function yamoney_api_get_quick_params(YAMoneyApiTransaction $transaction)
{
    $params = array();

    $params['receiver']         = variable_get('yamoney_api_receiver', '');
    $params['formcomment']      = variable_get('yamoney_api_formcomment', '');
    $params['short-dest']       = t('Payments for order No').$transaction->order_id;
    $params['writable-targets'] = false;
    $params['comment-needed']   = false;
    $params['label']            = $transaction->order_id;
    $params['order_id']         = (int)$transaction->order_id;
    $params['successUrl']       = url('yamoney_api/complete', array('absolute' => true));
    $params['targets']          = t('Payments for order No').$transaction->order_id;
    $params['sum']              = $transaction->amount;
    $params['quickpay-form']    = 'shop';
    $params['paymentType']      = variable_get(
        'yamoney_api_default_payment_method',
        YAMONEY_API_DEFAULT_PAYMENT_METHOD
    );
    $params['cms_name']         = 'drupal';

    drupal_alter('yamoney_api_quick_params', $params);

    return $params;
}

function yamoney_api_get_fastPay_params(YAMoneyApiTransaction $transaction)
{
    $params = array();

    $params['formId']          = variable_get('yamoney_billing_id');
    $params['sum']             = $transaction->amount;
    $params['narrative']       = str_replace(
        '%order_id%',
        $transaction->order_id,
        variable_get('yamoney_billing_narrative')
    );
    $params['quickPayVersion'] = QUICK_API_PAY_VERSION;
    $params['fio']             = '';

    drupal_alter('yamoney_fastPay_params', $params);

    return $params;
}

/**
 * @return string
 */
function yamoney_api_get_order_submission_url()
{
    if (variable_get('yamoney_api_shop')) {
        return '/';
    } else if (variable_get('yamoney_api_p2p')) {
        return 'https://money.yandex.ru/quickpay/confirm.xml';
    } else if (variable_get('yamoney_api_billing_enable')) {
        return 'https://money.yandex.ru/fastpay/confirm';
    }
}